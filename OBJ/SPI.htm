<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\SPI.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\SPI.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Fri Jan 27 17:35:28 2023
<BR><P>
<H3>Maximum Stack Usage =        184 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; PrintBuf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[102]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[25]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[25]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">HardFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">SVC_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">SysTick_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[15]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">TIM3_IRQHandler</a> from timer.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">USART1_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[52]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[51]">fputc</a> from usart.o(.text) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[53]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[54]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[56]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[14a]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[14b]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[14c]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[14d]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[14e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[f2]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[57]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[59]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[14f]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[60]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[150]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[5b]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[151]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[152]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[153]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[154]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[155]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[156]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[157]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[158]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[159]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[15a]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[15b]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[15c]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[15d]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[15e]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[15f]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[160]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[161]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[162]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[163]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[164]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[65]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[165]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[166]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[167]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[168]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[169]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[16a]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[55]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[16b]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[5d]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[5f]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[16c]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[61]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; PrintBuf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[16d]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[f3]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[64]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[16e]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[66]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[16f]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[62]"></a>main</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = main &rArr; PrintBuf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBuf
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[170]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>KEY_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>KEY_Scan</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KEY_Scan
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>SPI2_ReadWriteByte</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_WAKEUP
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_PowerDown
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Chip
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Disable
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_SR
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>

<P><STRONG><a name="[7d]"></a>SPI2_Init</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI2_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[82]"></a>SPI2_SetSpeed</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_SetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[6d]"></a>W25QXX_ReadID</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25QXX_ReadID &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>W25QXX_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = W25QXX_Init &rArr; SPI2_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SetSpeed
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>W25QXX_ReadSR</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
</UL>

<P><STRONG><a name="[84]"></a>W25QXX_Write_SR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[85]"></a>W25QXX_Write_Enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25QXX_Write_Enable &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Chip
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
</UL>

<P><STRONG><a name="[86]"></a>W25QXX_Write_Disable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[73]"></a>W25QXX_Read</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>W25QXX_Wait_Busy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Chip
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
</UL>

<P><STRONG><a name="[88]"></a>W25QXX_Write_Page</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
</UL>

<P><STRONG><a name="[89]"></a>W25QXX_Write_NoCheck</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>

<P><STRONG><a name="[8a]"></a>W25QXX_Erase_Sector</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = W25QXX_Erase_Sector &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>

<P><STRONG><a name="[72]"></a>W25QXX_Write</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, w25qxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>W25QXX_Erase_Chip</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[8c]"></a>W25QXX_PowerDown</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[8e]"></a>W25QXX_WAKEUP</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, w25qxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[8f]"></a>TIM3_Init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>

<P><STRONG><a name="[94]"></a>TIM3_Init_WithoutIT</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>

<P><STRONG><a name="[30]"></a>TIM3_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM3_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>delay_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>delay_us</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_WAKEUP
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_PowerDown
</UL>

<P><STRONG><a name="[6f]"></a>delay_ms</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>fgetc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instr
</UL>

<P><STRONG><a name="[fe]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[104]"></a>_ttywrch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[67]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[51]"></a>fputc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mputs
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_berror
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>uart_init</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>USART1_IRQHandler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[69]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[171]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[9d]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[9f]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[77]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
</UL>

<P><STRONG><a name="[173]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
</UL>

<P><STRONG><a name="[174]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[177]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[a0]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[182]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>RCC_LSEConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[192]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
</UL>

<P><STRONG><a name="[7e]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Init_WithoutIT
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[9e]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[a3]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[193]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[90]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Init_WithoutIT
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Init
</UL>

<P><STRONG><a name="[199]"></a>TIM_OC1Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>TIM_OC4Init</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[aa]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[a8]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[a6]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[a4]"></a>TIM_ICInit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[ad]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[19d]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Init_WithoutIT
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Init
</UL>

<P><STRONG><a name="[1a2]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Init
</UL>

<P><STRONG><a name="[1a3]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[ae]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[b0]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[b2]"></a>TIM_ETRConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[b1]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[b3]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[1a7]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>TIM_CCxNCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>TIM_SelectOCxM</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>TIM_GetCapture4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_keygen
</UL>

<P><STRONG><a name="[1da]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[98]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[1dd]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[99]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[1e0]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1e7]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1f3]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[80]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[b7]"></a>I2S_Init</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[1f4]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>I2S_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SetSpeed
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[1f6]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1f7]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[7c]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[1f9]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>SPI_GetCRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1ff]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[200]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[201]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[203]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>PrintBuf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sm2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = PrintBuf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_test_nosign
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_test
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>Printch</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sm2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[b9]"></a>sm2_keygen</STRONG> (Thumb, 542 bytes, Stack size 4456 bytes, sm2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mirvar_mem
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mirsys
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mirexit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irand
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_init_mem
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_get
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_mult
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cinstr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigrand
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_to_bytes
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_test_nosign
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_test
</UL>

<P><STRONG><a name="[c8]"></a>kdf</STRONG> (Thumb, 172 bytes, Stack size 160 bytes, sm2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3Calc
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt
</UL>

<P><STRONG><a name="[cb]"></a>sm2_encrypt</STRONG> (Thumb, 1054 bytes, Stack size 5240 bytes, sm2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;point_at_infinity
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mirvar_mem
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mirsys
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mirexit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irand
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_init_mem
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_get
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_mult
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cinstr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytes_to_big
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigrand
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_to_bytes
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3Calc
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_test_nosign
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_test
</UL>

<P><STRONG><a name="[d0]"></a>sm2_decrypt</STRONG> (Thumb, 852 bytes, Stack size 4792 bytes, sm2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;point_at_infinity
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mirvar_mem
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mirsys
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mirexit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_init_mem
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_get
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_mult
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cinstr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytes_to_big
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_to_bytes
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3Calc
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdf
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_test_nosign
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_test
</UL>

<P><STRONG><a name="[d2]"></a>sm2_sign</STRONG> (Thumb, 1540 bytes, Stack size 5992 bytes, sm2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xgcd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_compare
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mirvar_mem
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mirsys
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mirexit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irand
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_init_mem
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_get
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_mult
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cinstr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytes_to_big
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigrand
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_to_bytes
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3Calc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBuf
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_test
</UL>

<P><STRONG><a name="[dc]"></a>sm2_vrisign</STRONG> (Thumb, 1406 bytes, Stack size 6056 bytes, sm2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_compare
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mirvar_mem
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mirsys
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mirexit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_init_mem
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_get
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_mult
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_add
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cinstr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytes_to_big
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_to_bytes
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3Calc
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_test
</UL>

<P><STRONG><a name="[de]"></a>sm2_encrypt_test</STRONG> (Thumb, 284 bytes, Stack size 992 bytes, sm2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_vrisign
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_keygen
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBuf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[df]"></a>sm2_encrypt_test_nosign</STRONG> (Thumb, 182 bytes, Stack size 648 bytes, sm2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_keygen
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBuf
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[e1]"></a>ReverseWord</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sm3.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3Calc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3ProcessMessageBlock
</UL>

<P><STRONG><a name="[e3]"></a>T</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sm3.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3ProcessMessageBlock
</UL>

<P><STRONG><a name="[e4]"></a>FF</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, sm3.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3ProcessMessageBlock
</UL>

<P><STRONG><a name="[e5]"></a>GG</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, sm3.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3ProcessMessageBlock
</UL>

<P><STRONG><a name="[e6]"></a>P0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sm3.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3ProcessMessageBlock
</UL>

<P><STRONG><a name="[e2]"></a>P1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sm3.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3ProcessMessageBlock
</UL>

<P><STRONG><a name="[e7]"></a>SM3Init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sm3.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3Calc
</UL>

<P><STRONG><a name="[e0]"></a>SM3ProcessMessageBlock</STRONG> (Thumb, 556 bytes, Stack size 604 bytes, sm3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P0
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GG
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseWord
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P1
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3Calc
</UL>

<P><STRONG><a name="[ca]"></a>SM3Calc</STRONG> (Thumb, 202 bytes, Stack size 128 bytes, sm3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseWord
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3ProcessMessageBlock
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_vrisign
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdf
</UL>

<P><STRONG><a name="[204]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt
</UL>

<P><STRONG><a name="[cf]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redc
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;muldvm
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;muldiv
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalise
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_sdiv
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_pmul
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdiv
</UL>

<P><STRONG><a name="[205]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>__aeabi_llsr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redc
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_pmul
</UL>

<P><STRONG><a name="[206]"></a>_ll_ushift_r</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_test_nosign
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_test
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_vrisign
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printch
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBuf
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[ee]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[ec]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[58]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[207]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[63]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_berror
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d1]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3Calc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_vrisign
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kdf
</UL>

<P><STRONG><a name="[f4]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[208]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt_test
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_vrisign
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[209]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3Calc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memkill
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_memkill
</UL>

<P><STRONG><a name="[f5]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[20c]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_mult
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM3Calc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_vrisign
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_keygen
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mirsys_basic
</UL>

<P><STRONG><a name="[20d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[20f]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[212]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[f8]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[5c]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[fa]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[3]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[fb]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[5a]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[fc]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[eb]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[214]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[215]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[fd]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[f9]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[5e]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[100]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[ff]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[103]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[f1]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[d5]"></a>add</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, mrarth0.o(i.add), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_select
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xgcd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_vrisign
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbase
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_div2
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad
</UL>

<P><STRONG><a name="[c6]"></a>big_to_bytes</STRONG> (Thumb, 508 bytes, Stack size 64 bytes, mrarth1.o(i.big_to_bytes), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subdiv
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_lzero
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_berror
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_vrisign
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_keygen
</UL>

<P><STRONG><a name="[c3]"></a>bigrand</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, mrrand.o(i.bigrand), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_compare
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;brand
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_lzero
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_keygen
</UL>

<P><STRONG><a name="[10c]"></a>brand</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, mrcore.o(i.brand), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_shiftbits
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irand
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigrand
</UL>

<P><STRONG><a name="[cd]"></a>bytes_to_big</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, mrarth1.o(i.bytes_to_big), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incr
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;premult
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_lzero
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_berror
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_vrisign
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt
</UL>

<P><STRONG><a name="[bd]"></a>cinstr</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, mrio2.o(i.cinstr), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instr
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbase
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_setbase
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_berror
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_vrisign
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_keygen
</UL>

<P><STRONG><a name="[112]"></a>convert</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, mrcore.o(i.convert), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uconvert
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xgcd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incr
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_monty
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbase
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_sqroot
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_multi_inverse
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_double
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_getrhs
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expb2
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_lucas
</UL>

<P><STRONG><a name="[109]"></a>copy</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, mrcore.o(i.copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xgcd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_set
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_get
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_mult
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigrand
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_to_bytes
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_monty
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbase
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_sqroot
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_premult
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_multi_inverse
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_div2
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jack
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_norm
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_multi_norm
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_copy
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_double
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_padd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negify
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_shift
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logb2
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalise
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subdiv
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remain
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;premult
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_psub
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_padd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_lucas
</UL>

<P><STRONG><a name="[117]"></a>decr</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, mrarth0.o(i.decr), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_select
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_sqroot
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_lucas
</UL>

<P><STRONG><a name="[d6]"></a>divide</STRONG> (Thumb, 1908 bytes, Stack size 176 bytes, mrarth2.o(i.divide), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_compare
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalise
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_sdiv
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_pmul
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_lzero
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_berror
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_psub
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xgcd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigrand
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_vrisign
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_sqroot
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_premult
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad
</UL>

<P><STRONG><a name="[11d]"></a>ecp_memkill</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, mrcore.o(i.ecp_memkill), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_mult
</UL>

<P><STRONG><a name="[dd]"></a>ecurve_add</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, mrcurve.o(i.ecurve_add), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_copy
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_double
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_padd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_mult
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_vrisign
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_sub
</UL>

<P><STRONG><a name="[11e]"></a>ecurve_double</STRONG> (Thumb, 2006 bytes, Stack size 24 bytes, mrcurve.o(i.ecurve_double), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_set
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_premult
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_modsub
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_modmult
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_moddiv
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_modadd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_berror
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_mult
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_add
</UL>

<P><STRONG><a name="[be]"></a>ecurve_init</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, mrmonty.o(i.ecurve_init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_monty
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_vrisign
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_keygen
</UL>

<P><STRONG><a name="[c4]"></a>ecurve_mult</STRONG> (Thumb, 604 bytes, Stack size 3376 bytes, mrcurve.o(i.ecurve_mult), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mirvar_mem
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_init_mem
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_add
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_negate
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_multi_norm
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_copy
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_sub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_double
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negify
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_naf_window
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memkill
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecp_memkill
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logb2
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;premult
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_vrisign
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_keygen
</UL>

<P><STRONG><a name="[12d]"></a>ecurve_sub</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, mrcurve.o(i.ecurve_sub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_set
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_add
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_negate
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_mult
</UL>

<P><STRONG><a name="[11f]"></a>epoint_copy</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mrcurve.o(i.epoint_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_mult
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_add
</UL>

<P><STRONG><a name="[c5]"></a>epoint_get</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, mrcurve.o(i.epoint_get), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redc
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_norm
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remain
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_vrisign
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_keygen
</UL>

<P><STRONG><a name="[bf]"></a>epoint_init_mem</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mrcore.o(i.epoint_init_mem), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_init_mem_variable
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_mult
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_vrisign
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_keygen
</UL>

<P><STRONG><a name="[134]"></a>epoint_init_mem_variable</STRONG> (Thumb, 182 bytes, Stack size 36 bytes, mrcore.o(i.epoint_init_mem_variable), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mirvar_mem_variable
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_init_mem
</UL>

<P><STRONG><a name="[12a]"></a>epoint_multi_norm</STRONG> (Thumb, 328 bytes, Stack size 288 bytes, mrcurve.o(i.epoint_multi_norm), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_multi_inverse
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_modmult
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_norm
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_mult
</UL>

<P><STRONG><a name="[129]"></a>epoint_negate</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, mrcurve.o(i.epoint_negate), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_psub
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_mult
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_sub
</UL>

<P><STRONG><a name="[130]"></a>epoint_norm</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, mrcurve.o(i.epoint_norm), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_set
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_modmult
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_moddiv
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_berror
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_get
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_multi_norm
</UL>

<P><STRONG><a name="[c0]"></a>epoint_set</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, mrcurve.o(i.epoint_set), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_compare
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_sqroot
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_modmult
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_getrhs
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remain
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_psub
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_mult
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_vrisign
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_keygen
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_norm
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_sub
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_double
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_padd
</UL>

<P><STRONG><a name="[138]"></a>expb2</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, mrbits.o(i.expb2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_shiftbits
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_shift
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_pmul
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_berror
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_lucas
</UL>

<P><STRONG><a name="[110]"></a>exsign</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mrcore.o(i.exsign), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xgcd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbase
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_select
</UL>

<P><STRONG><a name="[148]"></a>getdig</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mrcore.o(i.getdig), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putdig
</UL>

<P><STRONG><a name="[d8]"></a>incr</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, mrarth0.o(i.incr), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_select
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytes_to_big
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_sqroot
</UL>

<P><STRONG><a name="[111]"></a>insign</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mrcore.o(i.insign), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xgcd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instr
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbase
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logb2
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_lucas
</UL>

<P><STRONG><a name="[115]"></a>instr</STRONG> (Thumb, 776 bytes, Stack size 56 bytes, mrio1.o(i.instr), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putdig
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insign
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_lzero
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_berror
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cinstr
</UL>

<P><STRONG><a name="[13c]"></a>invmodp</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, mrxgcd.o(i.invmodp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xgcd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_monty
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_multi_inverse
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_moddiv
</UL>

<P><STRONG><a name="[c2]"></a>irand</STRONG> (Thumb, 90 bytes, Stack size 28 bytes, mrcore.o(i.irand), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;brand
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_keygen
</UL>

<P><STRONG><a name="[13d]"></a>jack</STRONG> (Thumb, 378 bytes, Stack size 32 bytes, mrjack.o(i.jack), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_compare
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negify
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subdiv
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remain
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_psub
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_sqroot
</UL>

<P><STRONG><a name="[12b]"></a>logb2</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, mrbits.o(i.logb2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insign
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_sdiv
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_mult
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_lucas
</UL>

<P><STRONG><a name="[13e]"></a>mad</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, mrarth2.o(i.mad), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_berror
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xgcd
</UL>

<P><STRONG><a name="[12e]"></a>memkill</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mrcore.o(i.memkill), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mirexit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_mult
</UL>

<P><STRONG><a name="[c7]"></a>mirexit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mrcore.o(i.mirexit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memkill
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_vrisign
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_keygen
</UL>

<P><STRONG><a name="[bb]"></a>mirsys</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mrcore.o(i.mirsys), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mirsys_basic
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_vrisign
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_keygen
</UL>

<P><STRONG><a name="[13f]"></a>mirsys_basic</STRONG> (Thumb, 808 bytes, Stack size 32 bytes, mrcore.o(i.mirsys_basic), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mirvar_mem
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_setbase
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_berror
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mirsys
</UL>

<P><STRONG><a name="[bc]"></a>mirvar_mem</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mrcore.o(i.mirvar_mem), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mirvar_mem_variable
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_mult
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_vrisign
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_keygen
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mirsys_basic
</UL>

<P><STRONG><a name="[135]"></a>mirvar_mem_variable</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, mrcore.o(i.mirvar_mem_variable), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mirvar_mem
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_init_mem_variable
</UL>

<P><STRONG><a name="[108]"></a>mr_berror</STRONG> (Thumb, 1428 bytes, Stack size 16 bytes, mrcore.o(i.mr_berror), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mputs
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cinstr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytes_to_big
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_to_bytes
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_monty
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instr
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_multi_inverse
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_moddiv
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_norm
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_double
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_padd
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putdig
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mirsys_basic
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_shift
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expb2
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subdiv
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_pmul
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_psub
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_padd
</UL>

<P><STRONG><a name="[d7]"></a>mr_compare</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, mrcore.o(i.mr_compare), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_set
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigrand
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_vrisign
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_monty
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_modsub
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_modadd
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jack
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_select
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_lucas
</UL>

<P><STRONG><a name="[107]"></a>mr_lzero</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mrcore.o(i.mr_lzero), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytes_to_big
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigrand
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_to_bytes
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instr
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redc
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putdig
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subdiv
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_sdiv
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_psub
</UL>

<P><STRONG><a name="[12c]"></a>mr_naf_window</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, mrcore.o(i.mr_naf_window), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_testbit
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_mult
</UL>

<P><STRONG><a name="[143]"></a>mr_notint</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mrcore.o(i.mr_notint), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_shift
</UL>

<P><STRONG><a name="[142]"></a>mr_padd</STRONG> (Thumb, 446 bytes, Stack size 72 bytes, mrarth0.o(i.mr_padd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_berror
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xgcd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_modadd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_select
</UL>

<P><STRONG><a name="[113]"></a>mr_pmul</STRONG> (Thumb, 314 bytes, Stack size 80 bytes, mrarth1.o(i.mr_pmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_berror
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xgcd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbase
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_premult
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expb2
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalise
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;premult
</UL>

<P><STRONG><a name="[118]"></a>mr_psub</STRONG> (Thumb, 264 bytes, Stack size 64 bytes, mrarth0.o(i.mr_psub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_lzero
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_berror
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xgcd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_set
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_negate
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_modsub
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_modadd
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jack
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_negate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_select
</UL>

<P><STRONG><a name="[119]"></a>mr_sdiv</STRONG> (Thumb, 200 bytes, Stack size 64 bytes, mrarth1.o(i.mr_sdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_lzero
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logb2
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subdiv
</UL>

<P><STRONG><a name="[114]"></a>mr_setbase</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, mrcore.o(i.mr_setbase), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cinstr
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mirsys_basic
</UL>

<P><STRONG><a name="[139]"></a>mr_shift</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, mrcore.o(i.mr_shift), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_notint
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_berror
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_monty
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redc
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expb2
</UL>

<P><STRONG><a name="[10d]"></a>mr_shiftbits</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mrcore.o(i.mr_shiftbits), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbase
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;brand
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expb2
</UL>

<P><STRONG><a name="[141]"></a>mr_testbit</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, mrcore.o(i.mr_testbit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_naf_window
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_lucas
</UL>

<P><STRONG><a name="[105]"></a>mr_track</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mrcore.o(i.mr_track), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mputs
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xgcd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_set
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_get
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_mult
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_add
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cinstr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytes_to_big
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigrand
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_to_bytes
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_monty
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_negate
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instr
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbase
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_sqroot
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_premult
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_multi_inverse
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_modsub
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_modmult
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_moddiv
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_modadd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_div2
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jack
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invmodp
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_norm
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_negate
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_multi_norm
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_sub
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putdig
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_shift
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logb2
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expb2
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalise
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subdiv
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remain
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;premult
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_lucas
</UL>

<P><STRONG><a name="[144]"></a>muldiv</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, mrcore.o(i.muldiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xgcd
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redc
</UL>

<P><STRONG><a name="[145]"></a>muldvm</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, mrcore.o(i.muldvm), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xgcd
</UL>

<P><STRONG><a name="[da]"></a>multiply</STRONG> (Thumb, 1170 bytes, Stack size 112 bytes, mrarth2.o(i.multiply), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_lzero
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_berror
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_padd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xgcd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_modmult
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad
</UL>

<P><STRONG><a name="[128]"></a>negify</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, mrcore.o(i.negify), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xgcd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_mult
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jack
</UL>

<P><STRONG><a name="[11a]"></a>normalise</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, mrarth2.o(i.normalise), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_pmul
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide
</UL>

<P><STRONG><a name="[124]"></a>nres</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, mrmonty.o(i.nres), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_shift
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_berror
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_set
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_monty
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_sqroot
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_moddiv
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_double
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_getrhs
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_lucas
</UL>

<P><STRONG><a name="[12f]"></a>nres_div2</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, mrmonty.o(i.nres_div2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subdiv
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remain
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_padd
</UL>

<P><STRONG><a name="[146]"></a>nres_lucas</STRONG> (Thumb, 672 bytes, Stack size 40 bytes, mrlucas.o(i.nres_lucas), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_compare
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_modsub
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_modmult
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_testbit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insign
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logb2
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expb2
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subdiv
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decr
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_sqroot
</UL>

<P><STRONG><a name="[123]"></a>nres_modadd</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, mrmonty.o(i.nres_modadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_compare
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_psub
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_padd
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_premult
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_double
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_getrhs
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_padd
</UL>

<P><STRONG><a name="[125]"></a>nres_moddiv</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, mrmonty.o(i.nres_moddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_modmult
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invmodp
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_berror
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_sqroot
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_multi_inverse
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_norm
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_double
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_padd
</UL>

<P><STRONG><a name="[121]"></a>nres_modmult</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, mrmonty.o(i.nres_modmult), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redc
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_set
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_sqroot
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_multi_inverse
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_moddiv
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_norm
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_multi_norm
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_double
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_getrhs
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_padd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_lucas
</UL>

<P><STRONG><a name="[126]"></a>nres_modsub</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, mrmonty.o(i.nres_modsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_compare
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_psub
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_double
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_padd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_lucas
</UL>

<P><STRONG><a name="[136]"></a>nres_multi_inverse</STRONG> (Thumb, 386 bytes, Stack size 24 bytes, mrmonty.o(i.nres_multi_inverse), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_modmult
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_moddiv
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invmodp
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_berror
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_multi_norm
</UL>

<P><STRONG><a name="[147]"></a>nres_negate</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, mrmonty.o(i.nres_negate), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_psub
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_premult
</UL>

<P><STRONG><a name="[122]"></a>nres_premult</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, mrmonty.o(i.nres_premult), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_negate
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_modadd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_pmul
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_double
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_getrhs
</UL>

<P><STRONG><a name="[137]"></a>nres_sqroot</STRONG> (Thumb, 568 bytes, Stack size 32 bytes, mrsroot.o(i.nres_sqroot), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incr
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_modmult
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_moddiv
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jack
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subdiv
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;premult
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_lucas
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_set
</UL>

<P><STRONG><a name="[ce]"></a>point_at_infinity</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mrcore.o(i.point_at_infinity), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_decrypt
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_encrypt
</UL>

<P><STRONG><a name="[10e]"></a>premult</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, mrarth1.o(i.premult), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_pmul
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_mult
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytes_to_big
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_sqroot
</UL>

<P><STRONG><a name="[127]"></a>prepare_monty</STRONG> (Thumb, 456 bytes, Stack size 16 bytes, mrmonty.o(i.prepare_monty), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_compare
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invmodp
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_shift
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remain
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_berror
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_init
</UL>

<P><STRONG><a name="[13b]"></a>putdig</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, mrcore.o(i.putdig), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdig
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_lzero
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_berror
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instr
</UL>

<P><STRONG><a name="[131]"></a>redc</STRONG> (Thumb, 602 bytes, Stack size 104 bytes, mrmonty.o(i.redc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_compare
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;muldiv
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_shift
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_lzero
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_psub
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_set
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_get
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_sqroot
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_multi_inverse
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_modmult
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_moddiv
</UL>

<P><STRONG><a name="[132]"></a>remain</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, mrarth1.o(i.remain), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subdiv
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_set
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_get
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_monty
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_div2
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jack
</UL>

<P><STRONG><a name="[d4]"></a>size</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, mrcore.o(i.size), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xgcd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_mult
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_to_bytes
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_vrisign
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_monty
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_negate
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_sqroot
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_multi_inverse
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jack
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_negate
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_double
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_padd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logb2
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_lucas
</UL>

<P><STRONG><a name="[10a]"></a>subdiv</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, mrarth1.o(i.subdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_sdiv
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_lzero
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_berror
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_to_bytes
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_sqroot
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_div2
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jack
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remain
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_lucas
</UL>

<P><STRONG><a name="[db]"></a>subtract</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, mrarth0.o(i.subtract), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_select
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xgcd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_lucas
</UL>

<P><STRONG><a name="[116]"></a>uconvert</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, mrcore.o(i.uconvert), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert
</UL>

<P><STRONG><a name="[d9]"></a>xgcd</STRONG> (Thumb, 2382 bytes, Stack size 160 bytes, mrxgcd.o(i.xgcd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negify
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;muldvm
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;muldiv
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insign
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_pmul
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exsign
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_psub
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_padd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm2_sign
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invmodp
</UL>

<P><STRONG><a name="[10b]"></a>zero</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mrcore.o(i.zero), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xgcd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiply
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_get
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytes_to_big
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigrand
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_monty
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_negate
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instr
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbase
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_sqroot
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_premult
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_modmult
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_moddiv
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uconvert
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_shift
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subdiv
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;premult
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_sdiv
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_pmul
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_lucas
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[75]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[74]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[ab]"></a>TI4_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[a9]"></a>TI3_Config</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[a7]"></a>TI2_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[a5]"></a>TI1_Config</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[106]"></a>mr_select</STRONG> (Thumb, 312 bytes, Stack size 56 bytes, mrarth0.o(i.mr_select), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_compare
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exsign
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_psub
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_padd
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subtract
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decr
</UL>

<P><STRONG><a name="[140]"></a>mputs</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mrcore.o(i.mputs), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_berror
</UL>

<P><STRONG><a name="[120]"></a>ecurve_padd</STRONG> (Thumb, 1622 bytes, Stack size 32 bytes, mrcurve.o(i.ecurve_padd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_set
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_modsub
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_modmult
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_moddiv
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_modadd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_div2
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_berror
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecurve_add
</UL>

<P><STRONG><a name="[133]"></a>epoint_getrhs</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, mrcurve.o(i.epoint_getrhs), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_premult
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_modmult
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres_modadd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nres
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epoint_set
</UL>

<P><STRONG><a name="[10f]"></a>cbase</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, mrio2.o(i.cbase), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_shiftbits
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insign
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_pmul
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mr_track
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exsign
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cinstr
</UL>

<P><STRONG><a name="[149]"></a>qdiv</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, mrxgcd.o(i.qdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xgcd
</UL>

<P><STRONG><a name="[52]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
